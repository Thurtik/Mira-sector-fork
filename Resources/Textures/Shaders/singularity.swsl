//Gravitational lensing effect. Loosely inspired by https://unionassets.com/blog/the-effect-of-the-gravitational-lens-195 to be Clyde based (based on what)

uniform sampler2D SCREEN_TEXTURE;
uniform highp vec2 renderScale;
uniform highp float maxDistance;
uniform lowp int count;
uniform highp float maxDeformation;

uniform highp float[32] falloffPower;
uniform highp float[32] intensity;
uniform highp vec2[32] position;
uniform bool[32] hasEventHorizon;
// The array lengths correspond to the upper limit on the simultaneous distortion sources that can be present on screen at a time.
// If you want to change this, make sure to change all of them here, in the for loop, and, in whatever overlay assigns the uniforms
// (apparently #define is an unknown preprocessor directive)

void fragment() {

    highp vec2 finalCoords = FRAGCOORD.xy;
    highp vec2 delta;
    highp float distance;
    highp float deformation;
    lowp float brightnessFactor = 1.0;
    lowp float cumulativeBrightnessFactor = 1.0;

    for (int i = 0; i < 32 && i < count; i++) {

        delta = FRAGCOORD.xy - position[i];
        distance = length(delta / renderScale);

        deformation = intensity[i] / pow(distance, falloffPower[i]);

        // ensure deformation goes to zero at max distance
        // avoids long-range single-pixel shifts that are noticeable when leaving PVS.
        if (distance >= maxDistance) {
            deformation = 0.0;
        } else {
            deformation *= (1.0 - pow(distance / maxDistance, 4.0));

            if (hasEventHorizon[i] && intensity[i] > 0.0) {
                deformation += pow(deformation / maxDeformation, 32.0);

                brightnessFactor = clamp(-0.75 * deformation + 10.0, 0.0, 1.0);
                cumulativeBrightnessFactor *= brightnessFactor;
            }
        }

        finalCoords -= deformation * delta;
    }

    lowp vec4 color = zTextureSpec(SCREEN_TEXTURE, finalCoords * SCREEN_PIXEL_SIZE);
    color.rgb *= cumulativeBrightnessFactor;

    COLOR = color;
}
